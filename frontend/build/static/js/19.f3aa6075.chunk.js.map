{"version":3,"sources":["transcripts/pages/TranscriptHomeExchanges.js"],"names":["TranscriptHomeExchanges","auth","useContext","AuthContext","transcriptId","useParams","useState","loadedExchanges","setLoadedExchanges","useHttpClient","isLoading","error","sendRequest","clearError","useEffect","a","process","username","Authorization","token","responseData","exchangesWithUserExchangeRatings","fetchExchanges","Fragment","className","onClear","items"],"mappings":"uPA+CeA,UApCiB,WAC9B,IAAMC,EAAOC,qBAAWC,KAClBC,EAAeC,cAAYD,aAFG,EAGYE,qBAHZ,mBAG5BC,EAH4B,KAGXC,EAHW,OAIgBC,cAA7CC,EAJ6B,EAI7BA,UAAWC,EAJkB,EAIlBA,MAAOC,EAJW,EAIXA,YAAaC,EAJF,EAIEA,WAetC,OAbAC,qBAAU,YACY,uCAAG,4BAAAC,EAAA,+EAEQH,EAAY,GAAD,OACjCI,wCADiC,sBACcf,EAAKgB,SADnB,YAC+Bb,EAD/B,gBAC2D,MAAO,KAAM,CAC1Gc,cAAe,UAAYjB,EAAKkB,QAJjB,OAEbC,EAFa,OAMnBZ,EAAmBY,EAAaC,kCANb,uGAAH,qDASpBC,KACC,CAACV,EAAaX,EAAKkB,MAAOlB,EAAKgB,SAAUb,IAG1C,kBAAC,IAAMmB,SAAP,KACE,yBAAKC,UAAU,kBACb,kBAAC,IAAD,MACA,yBAAKA,UAAU,qBACb,kBAAC,IAAD,CAAYb,MAAOA,EAAOc,QAASZ,IAClCH,GAAc,yBAAKc,UAAU,UAC5B,kBAAC,IAAD,QAGAd,GAAaH,GAAmB,kBAAC,IAAD,CAAcmB,MAAOnB","file":"static/js/19.f3aa6075.chunk.js","sourcesContent":["import React, {useEffect, useState, useContext } from 'react';\n\nimport { useParams } from 'react-router-dom';\nimport TranscriptHome from '../components/TranscriptHome';\nimport ExchangeList from '../../dialogue/components/ExchangeList';\nimport ErrorModal from '../../shared/components/UIElements/ErrorModal';\nimport LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner';\nimport { useHttpClient } from '../../shared/hooks/http-hook';\nimport { AuthContext } from '../../shared/context/auth-context';\nimport './TranscriptHome.css';\n\nconst TranscriptHomeExchanges = () => {\n  const auth = useContext(AuthContext);\n  const transcriptId = useParams().transcriptId\n  const [ loadedExchanges, setLoadedExchanges ] = useState();\n  const {isLoading, error, sendRequest, clearError} = useHttpClient();\n\n  useEffect(() => {\n    const fetchExchanges = async () => {\n      try {\n        const responseData = await sendRequest(\n          `${process.env.REACT_APP_BACKEND_URL}/exchanges/${auth.username}/${transcriptId}/highlyRated`, 'GET', null, {\n            Authorization: 'Bearer ' + auth.token\n          });\n        setLoadedExchanges(responseData.exchangesWithUserExchangeRatings);\n      } catch (err) {}\n    };\n    fetchExchanges();\n  }, [sendRequest, auth.token, auth.username, transcriptId])\n\n  return (\n    <React.Fragment>\n      <div className=\"main-container\">\n        <TranscriptHome />\n        <div className=\"content-container\">\n          <ErrorModal error={error} onClear={clearError} />\n          {isLoading && (<div className=\"center\">\n            <LoadingSpinner />\n          </div>\n          )}\n          {!isLoading && loadedExchanges && <ExchangeList items={loadedExchanges} />}\n        </div>\n      </div>\n    </React.Fragment>\n  );\n};\n\nexport default TranscriptHomeExchanges;"],"sourceRoot":""}