{"version":3,"sources":["ratings/components/NewOpeningStatementRating.js","ratings/components/UpdateOpeningStatementRating.js","dialogue/components/OpeningStatementItem.js","dialogue/components/OpeningStatementList.js","transcripts/pages/TranscriptHomeFullTranscript.js"],"names":["NewOpeningStatementRating","props","auth","useContext","AuthContext","transcriptId","useParams","useHttpClient","isLoading","error","sendRequest","clearError","useState","rating","setRating","primaryEvidence","setPrimaryEvidence","contraryEvidence","setContraryEvidence","history","useHistory","ratingSubmitHandler","event","a","preventDefault","process","JSON","stringify","id","userId","Authorization","token","push","username","Fragment","ErrorModal","onClear","className","onSubmit","LoadingSpinner","as","Overlay","value","onChange","target","name","type","checked","Button","UpdateOpeningStatementRating","_id","OpeningStatementItem","Card","number","programmaticRating","executive","text","openingStatementRating","OpeningStatementList","items","length","map","openingStatement","key","userOpeningStatementRating","TranscriptHomeFullTranscript","loadedOpeningStatements","setLoadedOpeningStatements","loadedExchanges","setLoadedExchanges","useEffect","responseData","openingStatementsWithUserOpeningStatementRatings","fetchOpeningStatements","exchangesWithUserExchangeRatings","fetchExchanges"],"mappings":"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","file":"static/js/17.0ed08e9e.chunk.js","sourcesContent":["import React, { useContext, useState } from 'react';\nimport { useParams, useHistory } from 'react-router-dom';\n\nimport Button from '../../shared/components/FormElements/Button';\nimport ErrorModal from '../../shared/components/UIElements/ErrorModal';\nimport LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner';\nimport { AuthContext } from '../../shared/context/auth-context';\nimport { useHttpClient } from '../../shared/hooks/http-hook';\nimport './RatingForm.css';\n\nconst NewOpeningStatementRating = props => {\n  const auth = useContext(AuthContext);\n  const transcriptId = useParams().transcriptId;\n  const {isLoading, error, sendRequest, clearError} = useHttpClient();\n\n  const [rating, setRating] = useState('Unrated');\n  const [primaryEvidence, setPrimaryEvidence] = useState(false);\n  const [contraryEvidence, setContraryEvidence] = useState(false);\n\n  const ratingChangeHandler = event => {\n    setRating(event.target.value);\n  };\n\n  const primaryEvidenceChangeHandler = event => {\n    setPrimaryEvidence(!primaryEvidence);\n  };\n\n  const contraryEvidenceChangeHandler = event => {\n    setContraryEvidence(event.target.checked);\n  };\n\n  const history = useHistory();\n\n  const ratingSubmitHandler = async event => {\n    event.preventDefault();\n    try {\n      await sendRequest(\n        process.env.REACT_APP_BACKEND_URL + '/openingStatementRatings',\n        'POST', \n        JSON.stringify({\n          \"rating\": rating,\n          \"primaryEvidence\": primaryEvidence,\n          \"contraryEvidence\": contraryEvidence,\n          \"openingStatement\": props.id,\n          \"creator\": auth.userId\n        }), {\n        Authorization: 'Bearer ' + auth.token,\n        'Content-Type': 'application/json',\n      });\n      history.push('/');\n      history.push(`/users/${auth.username}/transcripts/${transcriptId}/opening-statements`);\n  } catch (err) {}\n  };\n\n  return (\n    <React.Fragment>\n    <ErrorModal error={error} onClear={clearError} />\n    <form className=\"rating-form\" onSubmit={ratingSubmitHandler}>\n      {isLoading && <LoadingSpinner as Overlay />}\n      <div className=\"rating-container\">\n      <div className=\"ratings-side-by-side-container\">\n      <label>\n        Rating:\n        <select value={rating} onChange={ratingChangeHandler}>\n          <option value=\"Unrated\">Unrated</option>\n          <option value=\"Off-Topic\">Off-Topic</option>\n          <option value=\"Results\">Results</option>\n          <option value=\"Guidance\">Guidance</option>\n          <option value=\"Magnitudinal Guidance\">Magnitudinal Guidance</option>\n          <option value=\"Downside Guidance\">Downside Guidance</option>\n          <option value=\"Upside Guidance\">Upside Guidance</option>\n        </select>\n      </label>\n      <label>\n        Primary Evidence (Y/N):\n        <input\n          name=\"primaryEvidence\"\n          type=\"checkbox\"\n          onChange={primaryEvidenceChangeHandler}\n          checked={primaryEvidence} />\n      </label>\n      <label>\n        Contrary Evidence (Y/N)?:\n        <input\n          name=\"contraryEvidence\"\n          type=\"checkbox\"\n          onChange={contraryEvidenceChangeHandler}\n          checked={contraryEvidence} />\n      </label>\n      <div className=\"rating-form__button\">\n        <Button type=\"submit\">\n            Update Ratings\n        </Button>\n      </div>\n      </div>\n      </div>\n    </form>\n    </React.Fragment>\n  );\n};\n\nexport default NewOpeningStatementRating;","import React, { useContext, useState } from 'react';\n\nimport Button from '../../shared/components/FormElements/Button';\nimport ErrorModal from '../../shared/components/UIElements/ErrorModal';\nimport LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner';\nimport { AuthContext } from '../../shared/context/auth-context';\nimport { useHttpClient } from '../../shared/hooks/http-hook';\nimport './RatingForm.css';\n\nconst UpdateOpeningStatementRating = props => {\n  const auth = useContext(AuthContext);\n  const {isLoading, error, sendRequest, clearError} = useHttpClient();\n\n  const [rating, setRating] = useState(props.rating);\n  const [primaryEvidence, setPrimaryEvidence] = useState(props.primaryEvidence);\n  const [contraryEvidence, setContraryEvidence] = useState(props.contraryEvidence);\n\n  const ratingChangeHandler = event => {\n    setRating(event.target.value);\n  };\n\n  const primaryEvidenceChangeHandler = event => {\n    setPrimaryEvidence(!primaryEvidence);\n  };\n\n  const contraryEvidenceChangeHandler = event => {\n    setContraryEvidence(event.target.checked);\n  };\n\n  const ratingSubmitHandler = async event => {\n    event.preventDefault();\n    try {\n      await sendRequest(\n        `${process.env.REACT_APP_BACKEND_URL}/openingStatementRatings/${props._id}`,\n        'PATCH', \n        JSON.stringify({\n          \"rating\": rating,\n          \"primaryEvidence\": primaryEvidence,\n          \"contraryEvidence\": contraryEvidence,\n          \"openingStatementRatingId\": props._id,\n          \"creator\": auth.userId\n        }), {\n        Authorization: 'Bearer ' + auth.token,\n        'Content-Type': 'application/json',\n      });\n  } catch (err) {}\n  };\n\n  return (\n    <React.Fragment>\n    <ErrorModal error={error} onClear={clearError} />\n    <form className=\"rating-form\" onSubmit={ratingSubmitHandler}>\n      {isLoading && <LoadingSpinner as Overlay />}\n      <div className=\"rating-container\">\n      <div className=\"ratings-side-by-side-container\">\n      <label>\n        Rating:\n        <select value={rating} onChange={ratingChangeHandler}>\n          <option value=\"Unrated\">Unrated</option>\n          <option value=\"Off-Topic\">Off-Topic</option>\n          <option value=\"Results\">Results</option>\n          <option value=\"Guidance\">Guidance</option>\n          <option value=\"Magnitudinal Guidance\">Magnitudinal Guidance</option>\n          <option value=\"Downside Guidance\">Downside Guidance</option>\n          <option value=\"Upside Guidance\">Upside Guidance</option>\n        </select>\n      </label>\n      </div>\n      <div className=\"ratings-side-by-side-container\">\n      <label>\n        Primary Evidence (Y/N):\n        <input\n          name=\"primaryEvidence\"\n          type=\"checkbox\"\n          onChange={primaryEvidenceChangeHandler}\n          checked={primaryEvidence} />\n      </label>\n      <label>\n        Contrary Evidence (Y/N)?:\n        <input\n          name=\"contraryEvidence\"\n          type=\"checkbox\"\n          onChange={contraryEvidenceChangeHandler}\n          checked={contraryEvidence} />\n      </label>\n      <div className=\"rating-form__button\">\n        <Button type=\"submit\">\n            Update Ratings\n        </Button>\n      </div>\n      </div>\n      </div>\n    </form>\n    </React.Fragment>\n  );\n};\n\nexport default UpdateOpeningStatementRating;","import React from 'react';\n\nimport Card from '../../shared/components/UIElements/Card';\nimport NewOpeningStatementRating from '../../ratings/components/NewOpeningStatementRating';\nimport './OpeningStatementItem.css';\nimport UpdateOpeningStatementRating from '../../ratings/components/UpdateOpeningStatementRating';\n\nconst OpeningStatementItem = props => {\n\n  return (\n    <React.Fragment>\n      <li className=\"openingStatement-item\">\n        <Card className=\"openingStatement-item__content\">\n          <h3>OS{props.number} (Programmatic Rating: {props.programmaticRating})</h3>\n          <h5>{props.executive}</h5>\n          <p>{props.text}</p>\n          {!props.openingStatementRating &&\n          <NewOpeningStatementRating {...props} />}\n          {props.openingStatementRating &&\n          <UpdateOpeningStatementRating {...props.openingStatementRating} />}\n        </Card>\n      </li>\n    </React.Fragment>\n  );\n};\n\nexport default OpeningStatementItem;\n","import React from 'react';\n\nimport Card from '../../shared/components/UIElements/Card';\nimport OpeningStatementItem from './OpeningStatementItem';\nimport './OpeningStatementList.css';\n\nconst OpeningStatementList = props => {\n  if (props.items.length === 0) {\n    return (\n        <Card className=\"empty-list-card\">\n          <h2>No opening statements found.</h2>\n        </Card>\n    );\n  }\n\n  return (\n    <ul className=\"openingStatement-list\">\n      {props.items.map(openingStatement => (\n        <OpeningStatementItem \n          key={openingStatement._id} \n          id={openingStatement._id} \n          number={openingStatement.number}\n          executive={openingStatement.executive}\n          text={openingStatement.text}\n          openingStatementRating={openingStatement.userOpeningStatementRating}\n          programmaticRating={openingStatement.programmaticRating}\n        />\n      ))}\n    </ul>\n  );\n\n}\nexport default OpeningStatementList;","import React, {useEffect, useState, useContext } from 'react';\n\nimport { useParams } from 'react-router-dom';\nimport TranscriptHome from '../components/TranscriptHome';\nimport ExchangeList from '../../dialogue/components/ExchangeList';\nimport OpeningStatementList from '../../dialogue/components/OpeningStatementList';\nimport ErrorModal from '../../shared/components/UIElements/ErrorModal';\nimport LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner';\nimport { useHttpClient } from '../../shared/hooks/http-hook';\nimport { AuthContext } from '../../shared/context/auth-context';\n\nconst TranscriptHomeFullTranscript = () => {\n  const auth = useContext(AuthContext);\n  const transcriptId = useParams().transcriptId\n  const [ loadedOpeningStatements, setLoadedOpeningStatements ] = useState();\n  const [ loadedExchanges, setLoadedExchanges ] = useState();\n  const {isLoading, error, sendRequest, clearError} = useHttpClient();\n\n  useEffect(() => {\n    const fetchOpeningStatements = async () => {\n      try {\n        const responseData = await sendRequest(\n          `${process.env.REACT_APP_BACKEND_URL}/openingStatements/${auth.username}/${transcriptId}`, 'GET', null, {\n            Authorization: 'Bearer ' + auth.token\n          });\n        setLoadedOpeningStatements(responseData.openingStatementsWithUserOpeningStatementRatings);\n      } catch (err) {}\n    };\n    fetchOpeningStatements();\n  }, [sendRequest, auth.token, auth.username, transcriptId])\n\n  useEffect(() => {\n    const fetchExchanges = async () => {\n      try {\n        const responseData = await sendRequest(\n          `${process.env.REACT_APP_BACKEND_URL}/exchanges/${auth.username}/${transcriptId}`, 'GET', null, {\n            Authorization: 'Bearer ' + auth.token\n          });\n        setLoadedExchanges(responseData.exchangesWithUserExchangeRatings);\n      } catch (err) {}\n    };\n    fetchExchanges();\n  }, [sendRequest, auth.token, auth.username, transcriptId])\n\n  return (\n    <React.Fragment>\n      <div className=\"main-container\">\n        <TranscriptHome />\n        <div className=\"content-container\">\n        <ErrorModal error={error} onClear={clearError} />\n        {isLoading && (<div className=\"center\">\n          <LoadingSpinner />\n        </div>\n        )}\n        {!isLoading && loadedOpeningStatements && <OpeningStatementList items={loadedOpeningStatements} />}\n        {!isLoading && loadedExchanges && <ExchangeList items={loadedExchanges} />}\n        </div>\n      </div>\n    </React.Fragment>\n  );\n};\n\nexport default TranscriptHomeFullTranscript;"],"sourceRoot":""}